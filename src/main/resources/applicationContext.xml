<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="false" xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"
       xmlns:aop="http://www.springframework.org/schema/aop">
    <!--开启注解扫描，base-package指定扫描的包路径-->
    <context:component-scan base-package="ioc"/>

    <!--开启自定义属性导入-->
    <context:property-placeholder location="classpath:jdbc.properties"/>


    <!--默认情况下，它会通过反射调用无参构造函数来创建对象。如果类中没有无参构造函数，将创建失败-->
    <bean id="connectionUtils" class="demo.spring.utils.ConnectionUtils" scope="prototype" lazy-init="false"/>
    <bean id="transactionManager" class="demo.spring.utils.TransactionManager" scope="singleton">
        <property name="ConnectionUtils" ref="connectionUtils"/>
    </bean>

    <!--使用静态方法创建对象的配置方式-->
    <bean id="userService" class="demo.spring.factory.BeanFactory" factory-method="createTransferService$static"/>


    <!--使用实例方法创建对象的配置方式-->
    <bean id="beanFactory" class="demo.spring.factory.BeanFactory"/>
    <bean id="transferService" factory-bean="beanFactory" factory-method="createTransferService$1"/>

    <!--使用构造函数注入-->
    <bean id="accountDao" class="demo.spring.dao.impl.JdbcAccountDaoImpl" init-method="init" destroy-method="destory">
        <constructor-arg name="connectionUtils" ref="connectionUtils"/>
    </bean>

    <!--使用set函数注入-->
    <bean id="accountDao$set" class="demo.spring.dao.impl.JdbcAccountDaoImpl" init-method="init"
          destroy-method="destory">
        <!--        <property name="connectionUtils" ref="connectionUtils"/>-->
        <property name="list">
            <array>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </array>
        </property>
    </bean>


    <!--外部配置bean使用xml方式-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="transferServiceImpl" class="demo.spring.service.impl.TransferServiceImpl"/>


    <bean id="companyBean" class="factorybean.CompanyFactoryBean">
        <property name="companyInfo" value="克里斯,多态,100"/>
    </bean>

    <bean id="myBeanPostProcessor" class="processor.DefaultBeanPostProcessor"/>

    <!--循环依赖-->
    <!--prototype 原型 bean循环依赖(无法解决)-->
    <!--    <bean id="testBean" class="beanfactory.TestBean" scope="prototype" lazy-init="false">-->
    <!--        <property name="cycleBean" ref="cycleBean"/>-->
    <!--    </bean>-->
    <!--    <bean id="cycleBean" class="beanfactory.CycleBean" scope="prototype" lazy-init="false">-->
    <!--        <property name="testBean" ref="testBean"/>-->
    <!--    </bean>-->

    <!--prototype 单利 bean循环依赖(构造方法无法解决) set可以解决-->
    <bean id="testBean" class="ioc.TestBean" scope="singleton" lazy-init="false">
        <property name="cycleBean" ref="cycleBean"/>
    </bean>
    <bean id="cycleBean" class="ioc.CycleBean" scope="singleton" lazy-init="false">
        <property name="testBean" ref="testBean"/>
    </bean>


    <!-- aop xml方式-->
    <bean id="advice" class="aop.Advice"/>
    <bean id="target" class="aop.Target"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <aop:config proxy-target-class="true">
        <aop:aspect id="aspect" ref="advice">
            <aop:pointcut id="pointcut" expression="execution(* aop.Target.transfer(..))"/>
            <aop:before method="before" pointcut-ref="pointcut"/>
            <aop:after-returning method="afterReturn" pointcut-ref="pointcut"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut" throwing="ex"/>
            <aop:after method="after" pointcut-ref="pointcut"/>
            <aop:around method="round" pointcut-ref="pointcut"/>
        </aop:aspect>
    </aop:config>

</beans>
